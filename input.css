@tailwind base;
@tailwind components;
@tailwind utilities;

.head {
    background-color: white;
    /* border: 2px solid black; */
    border-radius: 20px;
}
.food {
    background-color: rgb(250, 207, 114);
    border-radius: 100%;
}
.snake {
    border-radius: 12px;
    border: 2px solid rgb(0, 66, 67);
    background-color: rgb(179, 86, 4);
}
.bg-snake-pattern {
    background-size: cover;
}
/* .modal {
    display: none; 
    position: fixed; 
    z-index: 1; 
    left: 0;
    top: 0;
    width: 100%; 
    height: 100%; 
    overflow: auto; 
    background-color: rgb(0,0,0); 
    background-color: rgba(0,0,0,0.4); 
    justify-content: center; 
    align-items: center; 
    text-align: center;
} */

/* display: none;

This hides the modal by default. Elements with display: none; are not visible on the page and do not occupy any space in the layout.
This ensures the modal does not appear until it's explicitly shown by changing this property to another value (e.g., display: flex;).

position: fixed;

This positions the modal relative to the viewport (the browser window), meaning it will stay in the same place even if the user scrolls.
fixed positioning is crucial for a modal because it ensures the modal covers the entire viewport regardless of scrolling.

z-index: 1;

This sets the stacking order of the modal. Elements with a higher z-index appear in front of elements with a lower z-index.
A value of 1 is typically enough to ensure the modal appears above most other elements, but this can be adjusted if necessary.

left: 0;

This positions the left edge of the modal at the left edge of the viewport.
Ensures the modal covers the entire width of the viewport from the left side.

top: 0;

This positions the top edge of the modal at the top edge of the viewport.
Ensures the modal covers the entire height of the viewport from the top side.

width: 100%;

This sets the modal to be 100% of the viewport's width.
Ensures the modal spans the full width of the viewport.

height: 100%;

This sets the modal to be 100% of the viewport's height.
Ensures the modal spans the full height of the viewport.

overflow: auto;

This allows the content inside the modal to be scrollable if it overflows the boundaries of the modal.
Useful for ensuring that content doesn't get cut off and can be accessed by scrolling.

background-color: rgb(0,0,0);

This sets a background color using the RGB color model. Here, it sets the color to black.
Provides a fallback color in case the rgba value isn't supported.

background-color: rgba(0,0,0,0.4);

This sets a semi-transparent black background using the RGBA color model. The last value (0.4) is the alpha channel, which defines the opacity.
Creates a dark overlay that slightly dims the content behind the modal, making the modal's content more prominent.

justify-content: center;

This is a flexbox property that centers the content horizontally within the modal.
Ensures that any child elements inside the modal are centered horizontally.

align-items: center;

This is another flexbox property that centers the content vertically within the modal.
Ensures that any child elements inside the modal are centered vertically.

text-align: center;

This centers the text horizontally within the modal.
Ensures that any text content inside the modal is centered. */


/* .modal-content {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 300px;
    border-radius: 10px;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
}

#restartButton {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#restartButton:hover {
    background-color: #45a049;
} */
